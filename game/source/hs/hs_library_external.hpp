#pragma once

struct s_tag_block;
union real_point3d;
union real_vector3d;

extern void __cdecl hs_debug_variable(const char* s, bool debug);
extern void __cdecl hs_evaluate(int16 script_index);
extern void __cdecl hs_log_print(const char* s);
extern bool __cdecl hs_not(bool value);
extern void __cdecl hs_object_create(int16 object_name_index);
extern void __cdecl hs_object_create_anew(int16 object_name_index);
extern void __cdecl hs_object_create_anew_containing(const char* name_string);
extern void __cdecl hs_object_create_anew_multiplayer_cinematic(int16 object_name_index);
extern void __cdecl hs_object_create_clone(int16 object_name_index);
extern void __cdecl hs_object_create_clone_containing(const char* name_string);
extern void __cdecl hs_object_create_clone_multiplayer_cinematic(int16 object_name_index);
extern void __cdecl hs_object_create_containing(const char* name_string);
extern void __cdecl hs_object_create_folder(int32 folder_index);
extern void __cdecl hs_object_create_folder_anew(int32 folder_index);
extern void __cdecl hs_object_create_folder_internal(int32 folder_index, const s_tag_block* block, s_tag_block* palette, int32 size);
extern void __cdecl hs_object_create_if_necessary(int16 object_name_index);
extern void __cdecl hs_object_create_multiplayer_cinematic(int16 object_name_index);
extern void __cdecl hs_object_delete_internal(int32 object_index);
extern void __cdecl hs_object_destroy(int32 object_index);
extern void __cdecl hs_object_destroy_all();
extern void __cdecl hs_object_destroy_all_type_mask(int32 mask);
extern void __cdecl hs_object_destroy_by_name(int16 object_name_index);
extern void __cdecl hs_object_destroy_containing(const char* name_string);
extern void __cdecl hs_object_destroy_folder(int32 folder_index);
extern void __cdecl hs_object_destroy_folder_internal(int32 folder_index, const s_tag_block* block, s_tag_block* palette, int32 size);
extern void __cdecl hs_object_destroy_multiplayer_cinematic(int32 object_index);
extern void __cdecl hs_object_hide(int32 object_index, bool hide);
extern void __cdecl hs_object_iterate_names_containing(const char* name_string, void(__cdecl* iterator)(int16));
extern int32 __cdecl hs_object_list_get_element(int32 object_list_index, int16 element_index);
extern void __cdecl hs_object_new_by_name_internal(int16 object_name_index, bool displace_previous_object, bool multiplayer_cinematic_object);
extern void __cdecl hs_object_orient(int32 object_index, const real_point3d* position, const real_vector3d* forward, const real_vector3d* up, bool set_position, bool set_facing);
extern void __cdecl hs_object_set_facing(int32 object_index, int16 flag_index);
extern void __cdecl hs_object_set_permutation(int32 object_index, int32 region_name_id, int32 permutation_name_id);
extern void __cdecl hs_object_set_region_state(int32 object_index, int32 region_name_id, int32 model_state);
extern void __cdecl hs_object_set_shadowless(int32 object_index, bool shadowless);
extern void __cdecl hs_object_set_shield(int32 object_index, real32 shield);
extern void __cdecl hs_object_set_shield_normalized(int32 object_index, real32 shield);
extern void __cdecl hs_object_set_shield_stun(int32 object_index, real32 shield);
extern void __cdecl hs_object_set_shield_stun_infinite(int32 object_index);
extern void __cdecl hs_object_set_variant(int32 object_index, int32 variant_name);
extern void __cdecl hs_object_teleport(int32 object_index, int32 flag_index);
extern void __cdecl hs_object_teleport_ai(int32 object_index, int32 ai_point_ref);
extern bool __cdecl hs_objects_can_see_flag(int32 object_list_index, int16 flag_index, real32 degrees);
extern bool __cdecl hs_objects_can_see_object(int32 object_list_index, int32 object_index, real32 degrees);
extern void __cdecl hs_objects_delete_by_definition(int32 definition_index);
extern void __cdecl hs_objects_predict(int32 object_list_index, bool low_detail);
extern void __cdecl hs_objects_predict_high(int32 object_list_index);
extern void __cdecl hs_objects_predict_low(int32 object_list_index);
extern void __cdecl hs_objects_predict_old(int32 object_list_index);
extern void __cdecl hs_objects_predict(int32 object_list_index, bool low_detail);
extern void __cdecl hs_objects_predict_high(int32 object_list_index);
extern void __cdecl hs_objects_predict_low(int32 object_list_index);
extern void __cdecl hs_objects_predict_old(int32 object_list_index);
extern int32 __cdecl hs_players();
extern void __cdecl hs_position_predict(real32 x, real32 y, real32 z);
extern void __cdecl hs_print(const char* s);
extern void __cdecl hs_shader_predict(int32 shader_index);
extern void __cdecl hs_tag_load_force_programmer_only(const char* tag_path_plus_extension);
extern void __cdecl hs_tag_unload_force_programmer_only(const char* tag_path_plus_extension);
extern void __cdecl hs_teleport_players_not_in_trigger_volume(int16 trigger_volume_index, int16 flag_index);
extern bool __cdecl hs_trigger_volume_test_objects(int16 trigger_volume_index, int32 object_index, bool and_);
extern bool __cdecl hs_trigger_volume_test_objects_all(int16 trigger_volume_index, int32 object_index);
extern bool __cdecl hs_trigger_volume_test_objects_any(int16 trigger_volume_index, int32 object_index);
extern bool __cdecl hs_unit_can_see_flag(int32 unit_index, int16 flag_index, real32 degrees);
extern bool __cdecl hs_unit_can_see_object(int32 unit_index, int32 object_index, real32 degrees);
extern int32 __cdecl hs_user_interface_controller_get_last_level_played(int16 controller);

